// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenMapAck extends ethereum.Event {
  get params(): TokenMapAck__Params {
    return new TokenMapAck__Params(this);
  }
}

export class TokenMapAck__Params {
  _event: TokenMapAck;

  constructor(event: TokenMapAck) {
    this._event = event;
  }

  get tokenReq(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAck(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenManager extends ethereum.SmartContract {
  static bind(address: Address): TokenManager {
    return new TokenManager("TokenManager", address);
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mappedTokens(param0: Address): Address {
    let result = super.call("mappedTokens", "mappedTokens(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_mappedTokens(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "mappedTokens",
      "mappedTokens(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  wards(param0: Address): BigInt {
    let result = super.call("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_wards(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("wards", "wards(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addToken(
    ethTokenAddr: Address,
    name: string,
    symbol: string,
    decimals: i32
  ): Address {
    let result = super.call(
      "addToken",
      "addToken(address,string,string,uint8):(address)",
      [
        ethereum.Value.fromAddress(ethTokenAddr),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );

    return result[0].toAddress();
  }

  try_addToken(
    ethTokenAddr: Address,
    name: string,
    symbol: string,
    decimals: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addToken",
      "addToken(address,string,string,uint8):(address)",
      [
        ethereum.Value.fromAddress(ethTokenAddr),
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(decimals))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registerToken(ethTokenAddr: Address, oneTokenAddr: Address): boolean {
    let result = super.call(
      "registerToken",
      "registerToken(address,address):(bool)",
      [
        ethereum.Value.fromAddress(ethTokenAddr),
        ethereum.Value.fromAddress(oneTokenAddr)
      ]
    );

    return result[0].toBoolean();
  }

  try_registerToken(
    ethTokenAddr: Address,
    oneTokenAddr: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "registerToken",
      "registerToken(address,address):(bool)",
      [
        ethereum.Value.fromAddress(ethTokenAddr),
        ethereum.Value.fromAddress(oneTokenAddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class RelyCall extends ethereum.Call {
  get inputs(): RelyCall__Inputs {
    return new RelyCall__Inputs(this);
  }

  get outputs(): RelyCall__Outputs {
    return new RelyCall__Outputs(this);
  }
}

export class RelyCall__Inputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }

  get guy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RelyCall__Outputs {
  _call: RelyCall;

  constructor(call: RelyCall) {
    this._call = call;
  }
}

export class DenyCall extends ethereum.Call {
  get inputs(): DenyCall__Inputs {
    return new DenyCall__Inputs(this);
  }

  get outputs(): DenyCall__Outputs {
    return new DenyCall__Outputs(this);
  }
}

export class DenyCall__Inputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }

  get guy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DenyCall__Outputs {
  _call: DenyCall;

  constructor(call: DenyCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get decimals(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RegisterTokenCall extends ethereum.Call {
  get inputs(): RegisterTokenCall__Inputs {
    return new RegisterTokenCall__Inputs(this);
  }

  get outputs(): RegisterTokenCall__Outputs {
    return new RegisterTokenCall__Outputs(this);
  }
}

export class RegisterTokenCall__Inputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oneTokenAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterTokenCall__Outputs {
  _call: RegisterTokenCall;

  constructor(call: RegisterTokenCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RemoveTokenCall extends ethereum.Call {
  get inputs(): RemoveTokenCall__Inputs {
    return new RemoveTokenCall__Inputs(this);
  }

  get outputs(): RemoveTokenCall__Outputs {
    return new RemoveTokenCall__Outputs(this);
  }
}

export class RemoveTokenCall__Inputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }

  get ethTokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get supply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RemoveTokenCall__Outputs {
  _call: RemoveTokenCall;

  constructor(call: RemoveTokenCall) {
    this._call = call;
  }
}
