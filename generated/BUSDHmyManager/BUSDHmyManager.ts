// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get oneToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get receiptId(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class BUSDHmyManager extends ethereum.SmartContract {
  static bind(address: Address): BUSDHmyManager {
    return new BUSDHmyManager("BUSDHmyManager", address);
  }

  hBUSD(): Address {
    let result = super.call("hBUSD", "hBUSD():(address)", []);

    return result[0].toAddress();
  }

  try_hBUSD(): ethereum.CallResult<Address> {
    let result = super.tryCall("hBUSD", "hBUSD():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usedEvents_(param0: Bytes): boolean {
    let result = super.call("usedEvents_", "usedEvents_(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedEvents_(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("usedEvents_", "usedEvents_(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wallet(): Address {
    let result = super.call("wallet", "wallet():(address)", []);

    return result[0].toAddress();
  }

  try_wallet(): ethereum.CallResult<Address> {
    let result = super.tryCall("wallet", "wallet():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hBUSD(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _wallet(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get tokenManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eBUSD(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class DeregisterCall extends ethereum.Call {
  get inputs(): DeregisterCall__Inputs {
    return new DeregisterCall__Inputs(this);
  }

  get outputs(): DeregisterCall__Outputs {
    return new DeregisterCall__Outputs(this);
  }
}

export class DeregisterCall__Inputs {
  _call: DeregisterCall;

  constructor(call: DeregisterCall) {
    this._call = call;
  }

  get tokenManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get eBUSD(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeregisterCall__Outputs {
  _call: DeregisterCall;

  constructor(call: DeregisterCall) {
    this._call = call;
  }
}

export class BurnTokenCall extends ethereum.Call {
  get inputs(): BurnTokenCall__Inputs {
    return new BurnTokenCall__Inputs(this);
  }

  get outputs(): BurnTokenCall__Outputs {
    return new BurnTokenCall__Outputs(this);
  }
}

export class BurnTokenCall__Inputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BurnTokenCall__Outputs {
  _call: BurnTokenCall;

  constructor(call: BurnTokenCall) {
    this._call = call;
  }
}

export class MintTokenCall extends ethereum.Call {
  get inputs(): MintTokenCall__Inputs {
    return new MintTokenCall__Inputs(this);
  }

  get outputs(): MintTokenCall__Outputs {
    return new MintTokenCall__Outputs(this);
  }
}

export class MintTokenCall__Inputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get receiptId(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintTokenCall__Outputs {
  _call: MintTokenCall;

  constructor(call: MintTokenCall) {
    this._call = call;
  }
}
