// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TokenDetail extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenDetail entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenDetail entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenDetail", id.toString(), this);
  }

  static load(id: string): TokenDetail | null {
    return store.get("TokenDetail", id) as TokenDetail | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get totalLocked(): BigInt {
    let value = this.get("totalLocked");
    return value.toBigInt();
  }

  set totalLocked(value: BigInt) {
    this.set("totalLocked", Value.fromBigInt(value));
  }

  get network(): string | null {
    let value = this.get("network");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set network(value: string | null) {
    if (value === null) {
      this.unset("network");
    } else {
      this.set("network", Value.fromString(value as string));
    }
  }

  get erc20Address(): Bytes {
    let value = this.get("erc20Address");
    return value.toBytes();
  }

  set erc20Address(value: Bytes) {
    this.set("erc20Address", Value.fromBytes(value));
  }

  get hrc20Address(): Bytes {
    let value = this.get("hrc20Address");
    return value.toBytes();
  }

  set hrc20Address(value: Bytes) {
    this.set("hrc20Address", Value.fromBytes(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get erc20Address(): Bytes {
    let value = this.get("erc20Address");
    return value.toBytes();
  }

  set erc20Address(value: Bytes) {
    this.set("erc20Address", Value.fromBytes(value));
  }

  get erc20Name(): string {
    let value = this.get("erc20Name");
    return value.toString();
  }

  set erc20Name(value: string) {
    this.set("erc20Name", Value.fromString(value));
  }

  get erc20ChainId(): i32 {
    let value = this.get("erc20ChainId");
    return value.toI32();
  }

  set erc20ChainId(value: i32) {
    this.set("erc20ChainId", Value.fromI32(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get hrc20Address(): Bytes {
    let value = this.get("hrc20Address");
    return value.toBytes();
  }

  set hrc20Address(value: Bytes) {
    this.set("hrc20Address", Value.fromBytes(value));
  }

  get hrc20Name(): string {
    let value = this.get("hrc20Name");
    return value.toString();
  }

  set hrc20Name(value: string) {
    this.set("hrc20Name", Value.fromString(value));
  }

  get hrc20ChainId(): string {
    let value = this.get("hrc20ChainId");
    return value.toString();
  }

  set hrc20ChainId(value: string) {
    this.set("hrc20ChainId", Value.fromString(value));
  }
}
